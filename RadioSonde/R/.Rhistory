print(Q)
print( condProb)
print( condProb*Q)
print( condProb*Q*D)
fitGP0<- fevd( tmax, threshold =  94.5, type="GP")
hist( tmax[ tmax >= 94.5 ], prob= TRUE,
xlim=c( 92,108), breaks=(92:108)-.5 )
thetaHat<- fitGP0$results$par
xg<- seq( 92, 108, length.out=100)
den<- dGP(xg,  scale= thetaHat[1],
shape= thetaHat[2],
threshold = 94.5)
lines( xg , den, col="red", lwd=2 )
plot( fitGP0, type="qq2")
m<- 80
sigmaGrid<- seq( 2.0, 2.6, length.out=m)
shapeGrid<- seq( -.24, -.12, length.out=m)
upperBound<- logLike<- matrix(NA, m,m )
threshold<- 94.5
for( j in 1:m){
for( k in 1:m){
hold<- GPlogLike(tmax,
sigmaGrid[j],
shapeGrid[k], threshold)
%hold<- levd(tmax,threshold, scale= sigmaGrid[j],
m<- 80
sigmaGrid<- seq( 2.0, 2.6, length.out=m)
shapeGrid<- seq( -.24, -.12, length.out=m)
upperBound<- logLike<- matrix(NA, m,m )
threshold<- 94.5
for( j in 1:m){
cat( j , " ")
for( k in 1:m){
hold<- GPlogLike(tmax,
sigmaGrid[j],
shapeGrid[k], threshold)
#hold<- levd(tmax,threshold, scale= sigmaGrid[j],
#           shape=shapeGrid[k] , type="GP")
logLike[j,k]<- hold
upperBound[j,k] <- threshold - sigmaGrid[j]/shapeGrid[k]
}
}
cat( " ", fill=TRUE)
imagePlot(sigmaGrid, shapeGrid, logLike)
contour( sigmaGrid, shapeGrid, logLike,
level= max(logLike) - qchisq(.95,2)/2,
add=TRUE, col="white")
points( fitGP0$results$par[1], fitGP0$results$par[2], pch=16, col="black" )
ind<- 2* ( max(logLike) - logLike) <= qchisq(.95,2)
range( upperBound[ind])
GPlogLike<- function(Y,  sigma, shape,threshold){
# see wikipedia page for pdf
Ytail<- Y[ Y > threshold ]
z<- (Ytail - threshold)/ sigma
# upper bound when shape is negative.
if( shape < 0){
z<- z[ 1 + shape*z > 1e-5 ]
}
llike <- sum( -log( sigma) - ((1/shape)+1)* log( 1 + shape*z) )
return( llike)
}
m<- 80
sigmaGrid<- seq( 2.0, 2.6, length.out=m)
shapeGrid<- seq( -.24, -.12, length.out=m)
upperBound<- logLike<- matrix(NA, m,m )
threshold<- 94.5
for( j in 1:m){
cat( j , " ")
for( k in 1:m){
hold<- GPlogLike(tmax,
sigmaGrid[j],
shapeGrid[k], threshold)
#hold<- levd(tmax,threshold, scale= sigmaGrid[j],
#           shape=shapeGrid[k] , type="GP")
logLike[j,k]<- hold
upperBound[j,k] <- threshold - sigmaGrid[j]/shapeGrid[k]
}
}
cat( " ", fill=TRUE)
imagePlot(sigmaGrid, shapeGrid, logLike)
contour( sigmaGrid, shapeGrid, logLike,
level= max(logLike) - qchisq(.95,2)/2,
add=TRUE, col="white")
points( fitGP0$results$par[1], fitGP0$results$par[2], pch=16, col="black" )
ind<- 2* ( max(logLike) - logLike) <= qchisq(.95,2)
range( upperBound[ind])
tmaxJitter
threshold<- 94.5
for( j in 1:m){
cat( j , " ")
for( k in 1:m){
hold<- GPlogLike(tmaxJitter,
sigmaGrid[j],
shapeGrid[k], threshold)
#hold<- levd(tmax,threshold, scale= sigmaGrid[j],
#           shape=shapeGrid[k] , type="GP")
logLike[j,k]<- hold
upperBound[j,k] <- threshold - sigmaGrid[j]/shapeGrid[k]
}
}
cat( " ", fill=TRUE)
imagePlot(sigmaGrid, shapeGrid, logLike)
contour( sigmaGrid, shapeGrid, logLike,
level= max(logLike) - qchisq(.95,2)/2,
add=TRUE, col="white")
points( fitGP0$results$par[1], fitGP0$results$par[2], pch=16, col="black" )
ind<- 2* ( max(logLike) - logLike) <= qchisq(.95,2)
range( upperBound[ind])
contour( sigmaGrid, shapeGrid, logLike, add=TRUE)
m<- 80
sigmaGrid<- seq( 2.0, 2.8, length.out=m)
shapeGrid<- seq( -.26, -.12, length.out=m)
upperBound<- logLike<- matrix(NA, m,m )
threshold<- 94.5
for( j in 1:m){
cat( j , " ")
for( k in 1:m){
hold<- GPlogLike(tmaxJitter,
sigmaGrid[j],
shapeGrid[k], threshold)
#hold<- levd(tmax,threshold, scale= sigmaGrid[j],
#           shape=shapeGrid[k] , type="GP")
logLike[j,k]<- hold
upperBound[j,k] <- threshold - sigmaGrid[j]/shapeGrid[k]
}
}
cat( " ", fill=TRUE)
imagePlot(sigmaGrid, shapeGrid, logLike)
contour( sigmaGrid, shapeGrid, logLike,
level= max(logLike) - qchisq(.95,2)/2,
add=TRUE, col="white")
points( fitGP0$results$par[1], fitGP0$results$par[2], pch=16, col="black" )
names( fitGP0)
names( fitGP0$results)
names( fitGP0$results$value)
fitGP0$results$value
parMLE<- itGP0$results$par
levd(precip2, 94.5, scale= parMLE[1],
shape= parMLE[2], type="GP")
threshold<- 94.5
for( j in 1:m){
cat( j , " ")
for( k in 1:m){
hold<- GPlogLike(tmax,
sigmaGrid[j],
shapeGrid[k], threshold)
logLike[j,k]<- hold
upperBound[j,k] <- threshold - sigmaGrid[j]/shapeGrid[k]
}
}
cat( " ", fill=TRUE)
parMLE<- itGP0$results$par
levd(tmax, 94.5, scale= parMLE[1],
shape= parMLE[2], type="GP")
parMLE<- fitGP0$results$par
levd(tmax, 94.5, scale= parMLE[1],
shape= parMLE[2], type="GP")
parMLE<- fitGP0$results$par
lglike<- -1*levd(tmax, 94.5, scale= parMLE[1],
shape= parMLE[2], type="GP")
imagePlot(sigmaGrid, shapeGrid, logLike)
contour( sigmaGrid, shapeGrid, logLike,
level= maxLglike - qchisq(.95,2)/2,
add=TRUE, col="white")
maxLglike<- -1*levd(tmax, 94.5, scale= parMLE[1],
shape= parMLE[2], type="GP")
imagePlot(sigmaGrid, shapeGrid, logLike)
contour( sigmaGrid, shapeGrid, logLike,
level= maxLglike - qchisq(.95,2)/2,
add=TRUE, col="black")
m<- 80
sigmaGrid<- seq( 2.0, 2.8, length.out=m)
shapeGrid<- seq( -.26, -.10, length.out=m)
upperBound<- logLike<- matrix(NA, m,m )
threshold<- 94.5
for( j in 1:m){
cat( j , " ")
for( k in 1:m){
hold<- GPlogLike(tmax,
sigmaGrid[j],
shapeGrid[k], threshold)
logLike[j,k]<- hold
upperBound[j,k] <- threshold - sigmaGrid[j]/shapeGrid[k]
}
}
cat( " ", fill=TRUE)
parMLE<- fitGP0$results$par
maxLglike<- -1*levd(tmax, 94.5, scale= parMLE[1],
shape= parMLE[2], type="GP")
imagePlot(sigmaGrid, shapeGrid, logLike)
contour( sigmaGrid, shapeGrid, logLike,
level= maxLglike - qchisq(.95,2)/2,
add=TRUE, col="black")
imagePlot(sigmaGrid, shapeGrid, logLike)
contour( sigmaGrid, shapeGrid, logLike,
level= maxLglike - qchisq(.95,2)/2,
add=TRUE, col="black")
locator(2)
source('~/Dropbox/Home/Teaching/AMS536/theCourse/HW/HW07/GPFamily.R', echo=TRUE)
(1.995592- 2.542975)
N<- 200
n<- length( tmax)
out<- matrix( NA, N, 3)
set.seed( 111)
parMLE<- fitGP0$results$par
for( k in 1:N){
cat( k , " ")
tSample<- rGP(n, threshold= 95, scale=parMLE[1], shape= parMLE[2] )
fit<- fevd( tSample, threshold =  94.5, type="GP")
out[k,]<- fit$results$par
}
N<- 200
n<- length( tmax)
out<- matrix( NA, N, 3)
set.seed( 111)
parMLE<- fitGP0$results$par
for( k in 1:N){
cat( k , " ")
tSample<- rGP(n, threshold= 95, scale=parMLE[1], shape= parMLE[2] )
fit<- fevd( tSample, threshold =  94.5, type="GP")
out[k,1:2]<- fit$results$par
}
warnings()
upperTrue<- 94.5 - parMLE[1]/parMLE[2]
upperBoundBoot<- 94.5 - out[,1]/out[,2]
stats( upperBoundBoot - upperTrue)
upperTrue
quantile( upperBoundBoot - upperTrue, c(.05, .95))
plot( out)
points( rbind( parMLE))
points( rbind( parMLE), col="red")
parMLE
stats( upperBoundBoot)
upperTrue
quantile( upperBoundBoot/ upperTrue, c(.05, .95))
quantile( upperBoundBoot - upperTrue, c(.05, .95))
quantile( upperBoundBoot - upperTrue, c(.05, .95)) + upperTrue
quantile( upperBoundBoot / upperTrue, c(.05, .95))* upperTrue
quantile( upperBoundBoot - upperTrue, c(.05, .95)) + upperTrue
1+2+3+4
1+2+3+4
10/4
args( predict.lm)
library( fields)
help( which.max.image)
which.max.matrix
library( fields)
help( spatialProcess)
mKrig
fields.mkpoly
2023- 1997
352/26
40*25
35*25
35*25*4
25*40
8100/12/40
library( fields)
data()
?fields
1260 + 292
168*7
168*5
help( table)
test< sample( c("a","b","c"), 100, replace = TRUE)
test<- sample( c("a","b","c"), 100, replace = TRUE)
test
test2<- sample( c("a","b","c"), 100, replace = TRUE)
x1<- factor( test, levels= c("a","b","c","d"))
table( x1)
test2[1]<- "d"
x2<- factor( test2, levels= c("a","b","c","d"))
test
table( test, test2)
table( x1,x2)
help( table)
LETTERS
help( apply)
4973 / (4973 + 568)
-.044^(1/.3)
( -.044)^(1/.3)
( -.044)^(1/.3)
( -.044)^(1/.35)
( -.044)^(3)
( -.044)^(3.1)
( -.044)^(.1)
segements
segments
lines
lines.default
matlines.default
matlines
diagram::curvedarrow
sqrt( .05*.95/2e4)
sqrt( .05*.95/2e3)
sqrt( .05*.95/8e3)
.92*140
.95*140
.89*140
.9*140
.84*140
.95*160
.9*160
.98*160
678*4
677*4
library( fields)
fields.style
fields.style<- edit( fields.style)
fields.style()
plot( 1:10)
dev.off()
plot( 1:10)
par( pch=16)
plot( 1:10)
fields.style
par(cex.axis = 1.2, cex.lab = 1.2, cex = 1.2, cex.sub = 1.2,
cex.main = 1.2, lwd = 1.5, bg = "transparent", pch = 17)
plot( 1:10)
plot( 1:10, col=1:10)
set.seed( 111)
ptrue<- .45
n<- 425
Y<- rbinom(n, ptrue )
bigN<- 1e5
pPrior<- runif( bigN)
YTest<- rbinom( bigN, pPrior)
pPosterior<-  pPrior[ Ytest == Y]
set.seed( 111)
ptrue<- .45
n<- 425
Y<- rbinom(n, ptrue )
bigN<- 1e5
pPrior<- runif( bigN)
YTest<- rbinom( bigN, pPrior)
pPosterior<-  pPrior[ YTest == Y]
set.seed( 111)
ptrue<- .45
n<- 425
Y<- rbinom(n, ptrue )
bigN<- 1e5
pPrior<- runif( bigN)
YTest<- rbinom( bigN, n, prob= pPrior)
pPosterior<-  pPrior[ YTest == Y]
set.seed( 111)
ptrue<- .45
n<- 425
YTest<- rbinom(1,n,ptrue )
bigN<- 1e5
pPrior<- runif( bigN)
YTest<- rbinom( bigN, n, prob= pPrior)
pPosterior<-  pPrior[ YTest == Y]
set.seed( 111)
ptrue<- .45
n<- 425
YData<- rbinom(1,n,ptrue )
bigN<- 1e5
pPrior<- runif( bigN)
YTest<- rbinom( bigN, n, prob= pPrior)
pPosterior<-  pPrior[ YTest == YData]
hist( pPosterior)
length( pPosterior)
set.seed( 111)
ptrue<- .45
n<- 425
YData<- rbinom(1,n,ptrue )
bigN<- 1e6
pPrior<- runif( bigN)
YTest<- rbinom( bigN, n, prob= pPrior)
pPosterior<-  pPrior[ YTest == YData]
hist( pPosterior)
set.seed( 111)
ptrue<- .45
n<- 425
YData<- rbinom(1,n,ptrue )
bigN<- 1e6
pPrior<- runif( bigN)
YTest<- rbinom( bigN, n, prob= pPrior)
pPosterior<-  pPrior[ YTest == YData]
hist( pPosterior)
abline( v= ptrue, col="red")
set.seed( 111)
ptrue<- .45
n<- 425
YData<- rbinom(1,n,ptrue )
bigN<- 1e6
pPrior<- runif( bigN)
YTest<- rbinom( bigN, n, prob= pPrior)
pPosterior<-  pPrior[ YTest == YData]
hist( pPosterior)
abline( v= ptrue, col="red", lwd=3)
YData
library( fields)
fields.color.picker()
fields.color.picker(5)
fields.color.picker()
fields.color.picker
fields.color.picker()
N<- 200
theTimes<- matrix( 1:N, nrow=10)
# 90%
J<- sample( 1: 20, 18 , replace= FALSE)
Train<- c( theTimes[,J])
Test<- c( theTimes[,-J])
Train
Test
N<- 200
theTimes<- matrix( 1:N, nrow=10)
# 90%
J<- sample( 1: 20, 18 , replace= FALSE)
Train<- c( theTimes[,J])
nTrain<- length( Train)
Test<- c( theTimes[,-J])
nTest<- length( Test)
plot( Train, rep(1,nTrain),   type=”h”, lwd=2)
points( Test, rep(1,nTest), pch=16, col=”red”)
plot( Train, rep(1,nTrain),   type=”h”, lwd=2)
plot( Train, rep(1,nTrain),   type=’h’, lwd=2)
points( Test, rep(1,nTest), pch=16, col=”red”)
plot( Train, rep(1,nTrain),   lwd=2)
J
points( Test, rep(1,nTest), pch=16, col=’red’)
plot( Train, rep(1,nTrain),   lwd=2)
points( Test, rep(1,nTest), pch=16, col=2)
N<- 100
theTimes<- matrix( 1:N, nrow=10)
# 80%
J<- sample( 1: 20, 16 , replace= FALSE)
Train<- c( theTimes[,J])
nTrain<- length( Train)
Test<- c( theTimes[,-J])
nTest<- length( Test)
plot( Train, rep(1,nTrain),   lwd=2)
points( Test, rep(1,nTest), pch=16, col=2)
Test
J<- sample( 1: 20,  16 , replace= FALSE)
J
Train<- c( theTimes[,J])
nTrain<- length( Train)
N<- 100
nBlock<- N/10
theTimes<- matrix( 1:N, nrow=)
# 80%
J<- sample( 1: nBlock,  .8*nBlock , replace= FALSE)
Train<- c( theTimes[,J])
nTrain<- length( Train)
Test<- c( theTimes[,-J])
nTest<- length( Test)
plot( Train, rep(1,nTrain),   lwd=2)
points( Test, rep(1,nTest), pch=16, col=2)
Train
Test
Test<- c( theTimes[,-J])
Test
J
dim( theTimes)
N<- 100
nBlock<- N/10
theTimes<- matrix( 1:N, nrow=10)
# 80%
J<- sample( 1: nBlock,  .8*nBlock , replace= FALSE)
Train<- c( theTimes[,J])
nTrain<- length( Train)
Test<- c( theTimes[,-J])
nTest<- length( Test)
plot( Train, rep(1,nTrain),   lwd=2)
points( Test, rep(1,nTest), pch=16, col=2)
N<- 100
nBlock<- N/10
theTimes<- matrix( 1:N, nrow=10)
# 80%
J<- sample( 1: nBlock,  .8*nBlock , replace= FALSE)
Train<- c( theTimes[,J])
nTrain<- length( Train)
Test<- c( theTimes[,-J])
nTest<- length( Test)
plot( Train, rep(1,nTrain),   lwd=2)
points( Test, rep(1,nTest), pch=16, col=2)
N<- 100
nBlock<- N/10
theTimes<- matrix( 1:N, nrow=10)
# 80%
J<- sample( 1: nBlock,  .8*nBlock , replace= FALSE)
Train<- c( theTimes[,J])
nTrain<- length( Train)
Test<- c( theTimes[,-J])
nTest<- length( Test)
plot( Train, rep(1,nTrain),   lwd=2)
points( Test, rep(1,nTest), pch=16, col=2)
N<- 100
nBlock<- N/10
theTimes<- matrix( 1:N, nrow=10)
# 80%
J<- sample( 1: nBlock,  .8*nBlock , replace= FALSE)
Train<- c( theTimes[,J])
nTrain<- length( Train)
Test<- c( theTimes[,-J])
nTest<- length( Test)
plot( Train, rep(1,nTrain),   lwd=2)
points( Test, rep(1,nTest), pch=16, col=2)
N<- 200
nBlock<- N/10
theTimes<- matrix( 1:N, nrow=10)
# 80%
J<- sample( 1: nBlock,  .8*nBlock , replace= FALSE)
Train<- c( theTimes[,J])
nTrain<- length( Train)
Test<- c( theTimes[,-J])
nTest<- length( Test)
plot( Train, rep(1,nTrain),   lwd=2)
points( Test, rep(1,nTest), pch=16, col=2)
setwd("~/Dropbox/Home/Repositories/Radiosonde/RadioSonde/R")
